{"version":3,"sources":["assets/images/lucas.svg","components/common/Button/index.jsx","utils/index.js","components/SalutePage/SalutePage.jsx","components/common/Modal/index.jsx","components/common/Burger/index.jsx","components/GamePage/PriseList/index.jsx","components/GamePage/AnswerList/index.jsx","components/GamePage/GamePage.jsx","services/index.js","data.js","App.jsx","index.jsx"],"names":["module","exports","Button","name","onClick","className","type","cx","defaultProps","numberWithDelimiter","number","config","number_with_delimiter","drumroll","delay","Promise","resolve","setTimeout","SalutePage","mode","score","onStart","isEnd","buttonName","src","lucas","alt","Modal","isOpen","content","createPortal","document","getElementById","Burger","open","svgCell","width","height","viewBox","fill","xmlns","d","stroke","svgCellMobile","PriseList","priseList","step","map","prise","i","key","earned","active","variantMarkers","svgCellDecoration","AnswerList","answers","onSubmit","answerState","currAnswer","answer","restState","GamePage","currentQuestion","useState","isModalOpen","setIsModalOpen","renderedPriseList","question","dummyAnswers","data","500","corrects","1000","2000","4000","8000","16000","32000","64000","125000","250000","500000","1000000","keys","saluteModes","defaultAnswerState","wrong","correct","selected","App","setCurrentQuestion","setAnswerState","setMode","setStep","useEffect","length","wrongAnswers","shuffle","correctAnswer","shuffledAnswers","Array","_","concat","take","preparedAnswers","getQuestion","totalScore","includes","isCorrect","isGameOver","then","prevState","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b9a63471.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lucas.737e6436.svg\";","import React from 'react';\nimport T from 'prop-types';\nimport cx from 'classnames';\n\nimport './Button.scss';\n\nconst Button = ({ name, onClick, className }) => (\n  <button\n    type=\"button\"\n    onClick={onClick}\n    className={cx('btn', className)}\n  >\n    {name}\n  </button>\n);\n\nButton.propTypes = {\n  name: T.string.isRequired,\n  onClick: T.func.isRequired,\n  className: T.string,\n};\n\nButton.defaultProps = {\n  className: 'primary-btn',\n};\n\nexport default Button;\n","import { number_with_delimiter } from 'number_helpers';\n\nexport const numberWithDelimiter = (number, config = {}) => number_with_delimiter(number, config);\n\nexport const drumroll = (delay = 1500) => new Promise((resolve) => {\n  setTimeout(() => {\n    resolve();\n  }, delay);\n});\n","import React from 'react';\nimport T from 'prop-types';\nimport cx from 'classnames';\n\nimport Button from '../common/Button';\nimport { numberWithDelimiter } from '../../utils';\n\nimport lucas from '../../assets/images/lucas.svg';\nimport './SalutePage.scss';\n\nconst SalutePage = ({ mode, score, onStart }) => {\n  const isEnd = mode === 'end';\n  const buttonName = isEnd ? 'Try again' : 'Start';\n\n  return (\n    <div className={cx('salute', { 'salute-end': isEnd })}>\n      {!isEnd && <div className=\"salute-triangle-bg\" />}\n\n      <div className=\"salute-content\">\n        <div className=\"salute-content-image\">\n          <img className=\"thumb-up\" src={lucas} alt=\"lucas\" />\n        </div>\n\n        <div className=\"salute-content-text\">\n          {isEnd ? (\n            <>\n              <div className=\"content-suptitle\">Total score:</div>\n              <h1 className=\"content-title\">\n                &#36;\n                {numberWithDelimiter(score)}\n                earned\n              </h1>\n            </>\n          ) : (\n            <h1 className=\"content-title\">Who wants to be a millionaire?</h1>\n          )}\n\n          <Button\n            name={buttonName}\n            onClick={onStart}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nSalutePage.propTypes = {\n  mode: T.string.isRequired,\n  score: T.string.isRequired,\n  onStart: T.func.isRequired,\n};\n\nexport default SalutePage;\n","import React from 'react';\nimport { createPortal } from 'react-dom';\nimport T from 'prop-types';\n\nimport './Modal.scss';\n\nconst Modal = ({ isOpen, content, onClick }) => (\n  createPortal(\n    <div className=\"modal\">\n      <div className=\"modal-backdrop\" onClick={() => onClick(!isOpen)} />\n      <div className=\"modal-content\">\n        {content}\n      </div>\n    </div>,\n    document.getElementById('modal-root'),\n  )\n);\n\nModal.propTypes = {\n  isOpen: T.bool.isRequired,\n  onClick: T.func.isRequired,\n  content: T.element,\n};\n\nexport default Modal;\n","import React from 'react';\nimport T from 'prop-types';\nimport cx from 'classnames';\n\nimport './Burger.scss';\n\nconst Burger = ({ open, onClick }) => (\n  <div\n    className={cx('toggle', { 'toggle-open': open })}\n    onClick={() => onClick(!open)}\n  >\n    <div className=\"toggle-bar1\" />\n    <div className=\"toggle-bar2\" />\n    <div className=\"toggle-bar3\" />\n  </div>\n);\n\nBurger.propTypes = {\n  open: T.bool.isRequired,\n  onClick: T.func.isRequired,\n};\n\nexport default Burger;\n","import React from 'react';\nimport cx from 'classnames';\nimport T from 'prop-types';\n\nimport { numberWithDelimiter } from '../../../utils';\n\nimport './PriseList.scss';\n\nconst svgCell = (\n  <svg className=\"svg-cell\" width=\"240\" height=\"40\" viewBox=\"0 0 240 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M13.4526 4.63788C15.6376 2.01596 18.8742 0.5 22.2872 0.5H217.713C221.126 0.5 224.362 2.01597 226.547 4.63788L239.349 20L226.547 35.3621C224.362 37.984 221.126 39.5 217.713 39.5H22.2872C18.8742 39.5 15.6376 37.984 13.4526 35.3621L0.650853 20L13.4526 4.63788Z\" fill=\"white\" stroke=\"#D0D0D8\" />\n  </svg>\n);\n\nconst svgCellMobile = (\n  <svg className=\"svg-cell-mobile\" width=\"240\" height=\"32\" viewBox=\"0 0 240 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M13.5303 3.70404C15.6719 1.64809 18.5256 0.5 21.4944 0.5H218.506C221.474 0.5 224.328 1.64809 226.47 3.70404L239.278 16L226.47 28.296C224.328 30.3519 221.474 31.5 218.506 31.5H21.4944C18.5256 31.5 15.6719 30.3519 13.5303 28.296L0.721988 16L13.5303 3.70404Z\" fill=\"white\" stroke=\"#D0D0D8\" />\n  </svg>\n);\n\nconst PriseList = ({ priseList, step, className }) => (\n  <div className={cx('prise-list', className)}>\n    {priseList.map((prise, i) => (\n      <div\n        key={prise}\n        className={cx('prise-list-item', {\n          earned: i < step,\n          active: i === step,\n        })}\n      >\n        {svgCellMobile}\n        {svgCell}\n        <span>\n          &#36;\n          {numberWithDelimiter(prise)}\n        </span>\n      </div>\n    ))}\n  </div>\n);\n\nPriseList.propTypes = {\n  priseList: T.array.isRequired,\n  step: T.number.isRequired,\n  className: T.string,\n};\n\nexport default PriseList;\n","import React from 'react';\nimport cx from 'classnames';\nimport T from 'prop-types';\n\nimport './AnswerList.scss';\n\nconst variantMarkers = ['A', 'B', 'C', 'D'];\n\nconst svgCellDecoration = (\n  <svg width=\"373\" height=\"72\" viewBox=\"0 0 373 72\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M22.7172 5.28344C24.8781 2.28016 28.3521 0.5 32.052 0.5H340.948C344.648 0.5 348.122 2.28016 350.283 5.28344L372.384 36L350.283 66.7166C348.122 69.7198 344.648 71.5 340.948 71.5H32.052C28.3521 71.5 24.8781 69.7198 22.7172 66.7166L0.615976 36L22.7172 5.28344Z\" fill=\"white\" stroke=\"#D0D0D8\" />\n  </svg>\n);\n\nconst AnswerList = ({ answers = [], onSubmit, answerState }) => {\n  const { answer: currAnswer, ...restState } = answerState;\n\n  return (\n    <div className=\"game-answers\">\n      {answers.map((answer, i) => (\n        <div\n          key={variantMarkers[i]}\n          className={cx('game-answer', currAnswer === answer && restState)}\n          onClick={() => (!currAnswer ? onSubmit(answer) : null)}\n        >\n          {svgCellDecoration}\n          <div className=\"game-answer-content\">\n            <span className=\"variant\">{variantMarkers[i]}</span>\n            <span className=\"text\">{answer}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nAnswerList.propTypes = {\n  answers: T.array.isRequired,\n  onSubmit: T.func.isRequired,\n  answerState: T.object.isRequired,\n};\n\nexport default AnswerList;\n","import React, { useState } from 'react';\nimport T from 'prop-types';\n\nimport Modal from '../common/Modal';\nimport Burger from '../common/Burger';\nimport PriseList from './PriseList';\nimport AnswerList from './AnswerList';\n\nimport './GamePage.scss';\n\nconst GamePage = ({\n  currentQuestion, answerState, priseList, step, onSubmit,\n}) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const renderedPriseList = <PriseList priseList={priseList} step={step} />;\n\n  return (\n    <>\n      <div className=\"game\">\n        <Burger open={isModalOpen} onClick={setIsModalOpen} />\n\n        <div className=\"game-content\">\n          <div className=\"game-question\">\n            <h1>{currentQuestion.question}</h1>\n          </div>\n\n          <AnswerList\n            onSubmit={onSubmit}\n            answerState={answerState}\n            answers={currentQuestion.answers}\n          />\n        </div>\n\n        <div className=\"game-prises\">\n          {renderedPriseList}\n        </div>\n      </div>\n\n      {isModalOpen && (\n        <Modal\n          isOpen={isModalOpen}\n          onClick={setIsModalOpen}\n          content={renderedPriseList}\n        />\n      )}\n    </>\n  );\n};\n\nGamePage.propTypes = {\n  currentQuestion: T.object.isRequired,\n  answerState: T.object.isRequired,\n  priseList: T.array.isRequired,\n  step: T.number.isRequired,\n  onSubmit: T.func.isRequired,\n};\n\nexport default GamePage;\n","import { shuffle, take } from 'lodash';\n\nconst dummyAnswers = ['None', 'All', 'Else'];\n\nexport const getQuestion = (data, step = 500) => {\n  const currentQuestion = shuffle(data[step])[0];\n  const { answers, corrects, question } = currentQuestion;\n\n  const correctAnswer = shuffle(corrects)[0];\n\n  let wrongAnswers;\n\n  if (answers.length < 3) {\n    const shuffledAnswers = shuffle(dummyAnswers);\n    wrongAnswers = new Array(3 - answers.length)\n      .fill(null)\n      .map((_, i) => shuffledAnswers[i])\n      .concat(answers);\n  }\n\n  if (answers.length >= 3) {\n    wrongAnswers = take(shuffle(answers), 3);\n  }\n\n  const preparedAnswers = shuffle([...wrongAnswers, correctAnswer]);\n\n  return {\n    question,\n    correct: correctAnswer,\n    answers: preparedAnswers,\n  };\n};\n","export const data = {\n  500: [\n    {\n      question: \"Who wasn't a member of the Beatles?\",\n      corrects: ['Justin Timberlake'],\n      answers: [\n        'John Lennon',\n        'Paul McCartney',\n        'Ringo Star',\n      ],\n    },\n    {\n      question: 'Which website is the most popular search engine?',\n      corrects: ['Google'],\n      answers: [\n        'DuckDuckGo',\n        'Myspace',\n        'Bing',\n      ],\n    },\n    {\n      question: 'What is the smallest unit of American currency?',\n      corrects: ['Penny'],\n      answers: [\n        'Dime',\n        'Quarter',\n        'Dollar',\n      ],\n    },\n  ],\n  1000: [\n    {\n      question: 'In which sport do two teams pull at the opposite ends of a rope?',\n      corrects: ['Tug of war'],\n      answers: [\n        'Basketball',\n        'Ice hockey',\n        'Polo',\n      ],\n    },\n    {\n      question: 'What is the first word in the phonetic alphabet?',\n      corrects: ['Alpha'],\n      answers: [\n        'Apple',\n        'Armadillo',\n        'Amazon',\n      ],\n    },\n    {\n      question: \"In the novel 'The Lord of The Ring', Frodo, Sam and Bilbo come from which region of Middle Earth?\",\n      corrects: ['The Shire'],\n      answers: [\n        'The Green',\n        'The Borough',\n        'The City',\n      ],\n    },\n  ],\n  2000: [\n    {\n      question: 'Where does a cowboy wear chaps?',\n      corrects: ['On his legs'],\n      answers: [\n        'On his head',\n        'On his arms',\n        'On his hands',\n      ],\n    },\n    {\n      question: 'Which of these means a speech in a play where a character talks to themselves rather than to other characters?',\n      corrects: ['Soliloquy'],\n      answers: [\n        'Interlude',\n        'Revue',\n        'Chorus',\n      ],\n    },\n    {\n      question: \"In the 'Transformers' film franchise, who is the leader of the Decepticons?\",\n      corrects: ['Megatron'],\n      answers: [\n        'Megaphone',\n        'Megabyte',\n        'Megabus',\n      ],\n    },\n  ],\n  4000: [\n    {\n      question: 'Which of these zodiac signs is not represented by an animal with horns?',\n      corrects: ['Aquarius'],\n      answers: [\n        'Taurus',\n        'Capricorn',\n        'Aries',\n      ],\n    },\n    {\n      question: 'Which is a Mexican stuffed, fried pancake?',\n      corrects: ['Taco'],\n      answers: [\n        'Waco',\n        'Saki',\n        'Pesto',\n      ],\n    },\n  ],\n  8000: [\n    {\n      question: 'Sherpas and Gurkhas are native to which country?',\n      corrects: ['Nepal'],\n      answers: [\n        'Morocco',\n        'Ecuador',\n        'Russia',\n      ],\n    },\n    {\n      question: 'Which of these words means confused language or technical terminology?',\n      corrects: ['Jargon'],\n      answers: [\n        'Jardin',\n        'Jarhead',\n        'Jamjar',\n      ],\n    },\n  ],\n  16000: [\n    {\n      question: \"Escape' or 'Die Frying' is a tagline for which film?\",\n      corrects: ['Chicken Run'],\n      answers: [\n        'Ratatouille',\n        'Free Willy',\n        'Babe',\n      ],\n    },\n    {\n      question: 'Which of these is a 2003 Disney computer-animated film?',\n      corrects: ['Finding Nemo'],\n      answers: [\n        'Discovering Lemo',\n        'Unearthing Zemo',\n        'Locating Remo',\n      ],\n    },\n  ],\n  32000: [\n    {\n      question: 'What is the name of the world’s highest active volcano?',\n      corrects: ['Cotopaxi'],\n      answers: [\n        'St Helens',\n        'Etna',\n        'Krakatoa',\n      ],\n    },\n    {\n      question: \"According to the Highway Code, what shape is the standard sign giving the order to 'Stop'?\",\n      corrects: ['Octagon'],\n      answers: [\n        'Pentagon',\n        'Hexagon',\n        'Heptagon',\n      ],\n    },\n  ],\n  64000: [\n    {\n      question: 'Which of these books is believed to have been inspired by the real-life experiences of the Scottish sailor Alexander Selkirk?',\n      corrects: ['Robinson Crusoe'],\n      answers: [\n        'Moby Dick',\n        'The Count of Monte Cristo',\n        'Treasure Island',\n      ],\n    },\n    {\n      question: \"What was the nickname of Dr Leonard McCoy in the original series of 'Star Trek'?\",\n      corrects: ['Bones'],\n      answers: [\n        'Jaws',\n        'Head',\n        'Gums',\n      ],\n    },\n    {\n      question: \"Who was Brad Pitt's partner in the 1995 film 'Se7en'?\",\n      corrects: ['Morgan Freeman'],\n      answers: [\n        'Keanu Reeves',\n        'Bruce Willis',\n        'Matt Damon',\n      ],\n    },\n  ],\n  125000: [\n    {\n      question: \"The 2002 Booker Prize winner was Yan Martel's 'Life of ...'\",\n      corrects: ['Pi'],\n      answers: [\n        'Po',\n        'Pee',\n        'Pum',\n      ],\n    },\n    {\n      question: 'Who gave their name to a continent?',\n      corrects: ['Amerigo Vespucci'],\n      answers: [\n        'Europa Bellini',\n        'Africo Tintorini',\n        'Asio Canelli',\n      ],\n    },\n  ],\n  250000: [\n    {\n      question: 'The young of which creature is known as a squab?',\n      corrects: ['Pigeon'],\n      answers: [\n        'Salmon',\n        'Horse',\n        'Octopus',\n      ],\n    },\n    {\n      question: 'Which is a South American capital city?',\n      corrects: ['Cayenne'],\n      answers: [\n        'Paprika',\n        'Mustard',\n        'Saffron',\n      ],\n    },\n  ],\n  500000: [\n    {\n      question: 'An insect’s hard outer skeleton is made mainly of what substance?',\n      corrects: ['Chitin'],\n      answers: [\n        'Keratin',\n        'Glycogen',\n        'Lignin',\n      ],\n    },\n    {\n      question: \"Which 2002 Tom Hanks film had the tagline, 'Every father is a hero to his son'?\",\n      corrects: ['Road to Perdition'],\n      answers: [\n        'Road to Zanzibar',\n        'Road to Glory',\n        'Road to Morocco',\n      ],\n    },\n  ],\n  1000000: [\n    {\n      question: 'In 1718, which pirate died in battle off the coast of what is now North Carolina?',\n      corrects: ['Blackbeard'],\n      answers: [\n        'Captain Kidd',\n        'Calico Jack',\n        'Bartholomew Roberts',\n      ],\n    },\n    {\n      question: 'Which scientific unit is named after an Italian nobleman?',\n      corrects: ['Volt'],\n      answers: [\n        'Ohm',\n        'Hertz',\n        'Pascal',\n      ],\n    },\n    {\n      question: 'Who was the first man to travel into space twice?',\n      corrects: ['Gus Grissom'],\n      answers: [\n        'Vladimir Titov',\n        'Michael Collins',\n        'Yuri Gagarin',\n      ],\n    },\n  ],\n};\n","import React, { useEffect, useState } from 'react';\nimport { keys } from 'lodash';\n\nimport SalutePage from './components/SalutePage/SalutePage';\nimport GamePage from './components/GamePage/GamePage';\n\nimport { getQuestion } from './services';\nimport { drumroll } from './utils';\nimport { data } from './data';\n\nconst priseList = keys(data);\nconst saluteModes = ['start', 'end'];\n\nconst defaultAnswerState = {\n  answer: '',\n  wrong: false,\n  correct: false,\n  selected: false,\n};\n\nconst App = () => {\n  const [currentQuestion, setCurrentQuestion] = useState({});\n  const [answerState, setAnswerState] = useState(defaultAnswerState);\n  const [mode, setMode] = useState('start');\n  const [step, setStep] = useState(0);\n\n  useEffect(() => {\n    if (step < priseList.length) {\n      const question = getQuestion(data, priseList[step]);\n      setCurrentQuestion(question);\n    }\n  }, [step]);\n\n  const handleStart = () => {\n    setMode('game');\n    setStep(0);\n  };\n\n  const handleAnswerSubmit = (answer) => {\n    setAnswerState({ ...answerState, answer, selected: true });\n    const isCorrect = answer.includes(currentQuestion.correct);\n    const isGameOver = step === priseList.length - 1;\n\n    drumroll().then(() => {\n      if (isCorrect) {\n        setAnswerState((prevState) => ({ ...prevState, selected: false, correct: true }));\n        drumroll().then(() => {\n          setAnswerState(defaultAnswerState);\n          setStep(step + 1);\n\n          if (isGameOver) setMode('end');\n        });\n      } else {\n        setAnswerState((prevState) => ({ ...prevState, selected: false, wrong: true }));\n        drumroll().then(() => {\n          setAnswerState(defaultAnswerState);\n          setMode('end');\n        });\n      }\n    });\n  };\n\n  const totalScore = !step ? '0' : priseList[step - 1];\n\n  return (\n    <>\n      {saluteModes.includes(mode) && (\n        <SalutePage\n          mode={mode}\n          score={totalScore}\n          onStart={handleStart}\n        />\n      )}\n      {mode === 'game' && (\n        <GamePage\n          step={step}\n          priseList={priseList}\n          answerState={answerState}\n          currentQuestion={currentQuestion}\n          onSubmit={handleAnswerSubmit}\n        />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './assets/scss/main.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}